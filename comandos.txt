Comandos para git:

    git init :  Inicializar repositorio para el control de versiones

    git add "Nombre del archivo" / . / * : agregamos los archivos nuevos y modificados al stage area

    git commit -m "Descripcion de la actualizacion del estado de los archivos en el repositorio" : Registro de las modificaciones que son mandados a la base de datos de cambios historicos

    git status : Se mostrara el estado de los archivos en el repositorio, si no han sido agregados, o si no se han hecho commits para el Registro

    git log : Mostrara el registro de todos los commits que se han hecho
    git log "Nombre del archivo" : mostrara solo el registro de los commits que se han hecho sobre este archivo

    git log --stat : Mostrara a detalle los commits de las modificaciones que se hicieron

    git reset "Direccion del commit" --hard : Elimina los commits posteriores al commit al que estas haciendo reset, deshace los cambios en el stage area y deshace los cambios que tengas en tus archivos
    git reset "Direccion del commit" --soft : Elimina los commits posteriores al commit al que estas haciendo reset, conserva los cambios en el stage area y conserva los cambios que tengas en tus archivos
    git reset "Direccion del commit" --mixed : Elimina los commits posteriores al commit al que estas haciendo reset, deshace los cambios en el stage area y conserva los cambios que tengas en tus archivos

    git diff "Direccion de commit A" "Direccion de commit B" "Nombre del archivo" : Compara los commits de diferentes tiempos y muestra los cambios que hay entre los Descripcion

    git show : Muestra los cambios que se hicieron en el ultimo commit

    git checkout "Direccion del commit" "Nombre del archivo" : Nos permite regresar los cambios en el tiempo, nos lleva a un commit en el tiempo en especifico
    git checkout master "Nombre del archivo" : Regresamos a la ultima version o commit del archivo
    git ckeckout "nombre de la rama" : Nos permite movernos a la rama indicada en cual vamos a trabajar

    git clone "url" : Hace una copia del repositorio remoto en tu computadora

    git push : Manda al repositorio remoto la ultima version que hiciste en el repositorio local

    git fetch : Actualiza el registro de los commits del repositorio local que se hicieron en el repositorio remoto pero no se actualizan los archivos en el directorio

    git merge : Actualiza los archivos del directorio local con los cambios que se hicieron en el repositorio remoto

    git pull : Actualiza la base de datos de cambios y los cambios en los archivos

    git branch "Nombre de la nueva rama" : Creamos una nueva rama independiente de la rama master para trabajar sin afectar en los cambios a la ramama maestra 

    git show-branch --all : Muesta todas las ramas existentes 

Configuracion de Git para el registro del Autor que hace los cambios

    git config --global user.name "Nombre del Autor" : Configura el nombre del autor

    git config --global user.email "Correo electronico" : Configura el correo del autor

Conexion repositorio remoto
    git pull origin master : Traer cambios del repositorio remoto al local

    git pull --allow-unrelated-histories : Permite fucionar los archivos del repositorio local con el remoto

    git push origin master : Enviar rama master a repositorio en la nube, ingresar datos de logueo para registrar los commits

    git push origin master --allow

    git remote add origin "url del repositorio rn la nuve"

    git remote set-url "URL que se ingresara para cambiar" : Configuramos la forma en que la conexion remota al repositorio se hace via https o ssh

Cosas bonias u.u

    git log --all --graph --decorate --oneline : Muestra la historia y grafica las ramas de forma visual para ver el curso que a tomado el repositorio

Etiquetas para los comandos largos

    alias "etiqueta"=(Entre comillas)"Comando que deseamos hacerlo en una simple palabra para hacer mas eficiente la ejecucion" : Las alias o etiquetas en los comandos, nos ayuda hacer mas rapido y eficiente la manera de ejecutar los comando si estos son muy largos para poder escribirlos, simplemente podremos ejecutar un alias que refiera a este comando antes configurado con la etiqueta

    git tag -a "etiqueta" -m "Descripcion de la etiqueta" "hash del commit donde se posicionara" : Las etiquetas sirven para marcar partes del proyecto y definir puntos importantes como las versiones

    git push "repositorio remoto" --tags : Enviamos las etiquetas creadas al repositorio remoto

    git tag : muestra todas la etiqueta existentes en el proyecto

    git tag -d "nombre de la etiqueta" : Borramos la etiqueta especificada, de esta manera solo se borra en el repositorio local

    git push origin :refs/tags/"nombre de la etiqueta" : De esta manera borramos la etiqueta en el repositorio remoto previamente borrado de manera local




